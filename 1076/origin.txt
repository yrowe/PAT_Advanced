#include<cstdio>
#include<iostream>
#include<algorithm>
#include<vector>
#include<queue>
using namespace std;
const int maxn = 1010;
int n,k;
bool visit[maxn];

vector<int> adj[maxn];

struct customed{
    int point;
    int layer;
};

int BFS(int v,int cnt){
    customed t{v,0};
    queue<customed> q;
    q.push(t);
    visit[v] = true;
    while(!q.empty()){
        customed tmp = q.front();
        q.pop();
        int p = tmp.point;
        for(int i = 0;i < adj[p].size();++i){
            int u = adj[p][i];
            if(visit[u] == false && tmp.layer+1 <= k){
                cnt++;
                visit[u] = true;
                customed c;
                c.point = u;
                c.layer = tmp.layer+1;
                q.push(c);
            }
        }
    }
    return cnt;
}

int main(){
    //freopen("inputa1076.txt","r",stdin);
    cin >> n >> k;
    for(int i = 1;i <= n;++i){
        int num;
        cin >> num;
        while(num--){
            int tmp;
            cin >> tmp;
            adj[tmp].push_back(i);
        }
    }
    int m;
    cin >> m;
    while(m--){
        int st;
        cin >> st;
        fill(visit+1,visit+1+n,false);
        cout << BFS(st,0) << endl;
    }

}
