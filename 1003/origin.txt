#include<iostream>
#include<fstream>
#include<algorithm>
using namespace std;

const int maxn = 510;
const int INF = 0x7fffffff;
bool vis[maxn] = { false };
int G[maxn][maxn];
int d[maxn];
int weight[maxn];
int w[maxn] = { 0 };
int num[maxn] = { 0 };


int main() {
#ifdef _DEBUG
	ifstream cin("data.txt");
#endif
	fill(G[0], G[0] + maxn*maxn, INF);
	fill(d, d + maxn, INF);
	int n, k, start, end;
	cin >> n >> k >> start >> end;
	for (int i = 0; i < n; ++i) {
		cin >> weight[i];
	}
	while (k--) {
		int v1, v2;
		cin >> v1 >> v2;
		cin >> G[v1][v2];
		G[v2][v1] = G[v1][v2];
	}

	d[start] = 0;
	w[start] = weight[start];
	num[start] = 1;

	for (int i = 0; i < n; ++i) {
		int u = -1, MIN = INF;
		for (int j = 0; j < n; ++j) {
			if (vis[j] == false && d[j] < MIN) {
				u = j;
				MIN = d[j];
			}
		}
		if (u == -1) break;
		vis[u] = true;
		for (int v = 0; v < n; ++v) {
			if (vis[v] == false && G[u][v] != INF) {
				if (d[u] + G[u][v] < d[v]) {
					d[v] = d[u] + G[u][v];
					w[v] = w[u] + weight[v];
					num[v] = num[u];
				}
				else if (d[u] + G[u][v] == d[v]) {
					if (w[u] + weight[v] > w[v]) {
						w[v] = w[u] + weight[v];
					}
					num[v] += num[u];
				}
			}
		}
	}

	cout << num[end] << " " << w[end] << endl;
	//system("pause");
#ifdef _DEBUG
	cin.close();
#endif
	return 0;
}