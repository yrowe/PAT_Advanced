#include<cstdio>
#include<iostream>
#include<algorithm>
#include<vector>
#include<set>
using namespace std;

const int maxn = 10010;
int father[maxn];
int isRoot[maxn] = {0};

set<int> out_ans;

int findFather(int x){
    int a = x;
    while(x != father[x]){
        x = father[x];
    }

    while(a != father[a]){
        int z = a;
        a = father[a];
        father[z] = x;
    }
    return x;
}

void Union(int a,int b){
    int faA = findFather(a);
    int faB = findFather(b);
    if(faA != faB){
        father[faA] = faB;
    }

}

vector<int> adj[maxn];
bool visit[maxn] = {false};
int maxDepth = -1;

void DFS(int v,int depth,vector<int> &ans){
    visit[v] = true;
    if(depth == maxDepth){

        ans.push_back(v);
    }
    if(depth > maxDepth){
        maxDepth = depth;
        ans.clear();
        ans.push_back(v);
    }
    for(int i = 0;i < adj[v].size();++i){
        int u = adj[v][i];
        if(visit[u] == false){
            DFS(u,depth+1,ans);
        }
    }
}

int main(){
    //freopen("inputa1021.txt","r",stdin);
    int n;
    cin >> n;
    for(int i = 1;i <= n;++i){
        father[i] = i;
    }

    for(int i = 1;i <= n-1;++i){
        int v1,v2;
        cin >> v1 >> v2;
        adj[v1].push_back(v2);
        adj[v2].push_back(v1);
        Union(v1,v2);
    }

    for(int i = 1;i <= n;++i){
        isRoot[findFather(i)]++;
    }

    int block = 0;
    for(int i = 1;i <= n;++i){
        if(isRoot[i] > 0) block++;
    }

    if(block > 1){
        cout << "Error: " << block << " components" << endl;
        return 0;
    }

    //for the sake of simplicity,fix node 1 as the point to DFS
    vector<int> ans1,ans2;
    DFS(1,0,ans1);
    int p2 = ans1[0];
    fill(visit+1,visit+1+n,false);
    maxDepth = -1;

    DFS(p2,0,ans2);
    for(auto i:ans1){
        out_ans.insert(i);
    }
    for(auto i:ans2){
        out_ans.insert(i);
    }

    for(auto i:out_ans){
        cout << i << endl;
    }
}
