#include<cstdio>
#include<iostream>
#include<fstream>
#include<algorithm>
#include<vector>
using namespace std;

const int maxn = 505;
int G[maxn][maxn];
bool vis[maxn] = { false };
int n, m;

void dfs(int v) {
	for (int i = 1; i <= n; ++i) {
		if (vis[i] == false && G[v][i] == 1) {
			vis[i] = true;
			dfs(i);
		}
	}
}

int main() {
#ifdef _DEBUG
	ifstream cin("data.txt");
#endif
	vector<int> vertex;

	cin >> n >> m;
	vertex.resize(n + 1);
	for (int i = 0; i < m; ++i) {
		int v1, v2;
		cin >> v1 >> v2;
		G[v1][v2] = 1;
		G[v2][v1] = 1;
		vertex[v1]++;
		vertex[v2]++;
	}
	int block = 0;
	for (int i = 1; i <= n; ++i) {
		if (vis[i] == false) {
			dfs(i);
			block++;
		}
	}


	int cnt = 0;
	for (int i = 1; i <= n; ++i) {
		if (vertex[i] % 2 != 0)
			cnt++;
	}
	for (int i = 1; i <= n; ++i) {
		if (i != n)
			cout << vertex[i] << " ";
		else
			cout << vertex[i] << endl;
	}
	if (block > 1)
		cout << "Non-Eulerian" << endl;
	else {
		if (cnt == 0)
			cout << "Eulerian" << endl;
		else if (cnt == 2)
			cout << "Semi-Eulerian" << endl;
		else
			cout << "Non-Eulerian" << endl;
	}



#ifdef _DEBUG
	cin.close();
#endif
}